# -*- coding: utf-8 -*-
"""DATA 226 Homework 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UAD8JNDVYXyNcm1JLE--kuM1qQJaEcyc
"""

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import timedelta
from datetime import datetime
import snowflake.connector
import requests

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()

# EXTRACT; first task
@task
def extract(symbol):
    vantage_api_key = Variable.get('vantage_api_key')
    url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={vantage_api_key}'
    r = requests.get(url)
    data = r.json()
    return data

# TRANSFORM; second task
@task
def transform(data):
  """
   - return the last 90 days of the stock prices of symbol as a list of json strings
  """
  results = []
  for d in data["Time Series (Daily)"]:
    stock_info = data["Time Series (Daily)"][d]
    stock_info["date"] = d
    results.append(stock_info)
  results = results[:90]
  return results

# updated SQL transaction for loading/deleting records; third task
@task
def load(symbol, records, target_table):
  cur = return_snowflake_conn()
  try:
    cur.execute("BEGIN;")
    cur.execute(f"""CREATE TABLE IF NOT EXISTS {target_table} (
      symbol  VARCHAR,
      date    DATE,
      open    FLOAT,
      close   FLOAT,
      high    FLOAT,
      low     FLOAT,
      volume  INT,
      PRIMARY KEY (symbol, date)
      );
      """)
    cur.execute(f"""DELETE FROM {target_table}""")
    for r in records:
      open = float(r["1. open"])
      high = float(r["2. high"])
      low = float(r["3. low"])
      close = float(r["4. close"])
      volume = int(r["5. volume"])
      date = r["date"]
      insert_sql = f"INSERT INTO {target_table} (symbol, open, high, low, close, volume, date) VALUES ('{symbol}', {open}, {high}, {low}, {close}, {volume}, '{date}')"
      cur.execute(insert_sql)
    cur.execute("COMMIT;")
  except Exception as e:
    cur.execute("ROLLBACK;")
    print(e)
    raise e

# creating the DAG
with DAG(
  dag_id = 'return_90_day_stock_data',
  start_date = datetime(2024,10,1),
  catchup=False,
  tags=['ETL'],
  schedule = '20 9 * * *'
) as dag:
  target_table = "raw.stock_data"
  symbol = 'AVGO'

  data = extract(symbol)
  price_list = transform(data)
  load(symbol, price_list, target_table)